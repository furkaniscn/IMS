@page "/editproduct/{ProductId:int}"
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@rendermode InteractiveServer
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />
@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
            <ValidationMessage For="() => product.ProductName"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.ProductQuantity" class="form-control"></InputNumber>
            <ValidationMessage For="() => product.ProductQuantity"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.ProductPrice" class="form-control"></InputNumber>
            <ValidationMessage For="() => product.ProductPrice"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="">Inventories</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-outline-success">Update</button>
        &nbsp;
        <a href="/products" class="btn btn-outline-danger">Cancel</a>
    </EditForm>
}

@code {
    private Product? product;

    [Parameter]
    public int ProductId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.ProductId);
    }

    private async Task Update()
    {
        if (product != null)
        {
            await EditProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
