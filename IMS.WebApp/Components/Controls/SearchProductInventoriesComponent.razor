@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control"
           placeholder="Type something here to search"
           @bind-value="this.searchFilter" @bind-value:event="oninput">
    </input>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>
@if (inventories != null && inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (var inv in inventories)
            {
                <li @key="inv.InventoryID"
                    @onclick="() => {HandleSelectInventory(inv);}">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}


@code {
    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    //State Variable-
    //private string searchFilter = string.Empty;
    private string _searchFilter;
    private string searchFilter
    {
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }
    private List<Inventory> inventories = new List<Inventory>();

    private async Task HandleSearch()
    {
        await Task.Delay(1000);//Gerçek db simülasyonu için 1 dakika delay verdik.
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(this.searchFilter)).ToList();

        //State'in(inventories) değiştiğini söylüyoruz.
        //Bunu yapmazsak html daha önce render olduğu için değişikliği algılamaz.(async durumlarda geçerli)
        StateHasChanged();
    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        inventories.Clear();
    }
}
